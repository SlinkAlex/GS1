%section.contexto
  %label.contexto 
    =@producto.new_record? ? ("#{@empresa.prefijo} > " + @empresa.nombre_empresa + " > Registrar Producto") : "#{@empresa.prefijo} > "+(@empresa.nombre_empresa + " > Editar Producto > #{@producto.gtin}")
  %hr.contexto{:size => "1"}

  %section.formulario
    
    = form_for [@empresa, @producto] do |f|
      - if @producto.errors.any?
        #error_explanation
          %h2= "#{pluralize(@producto.errors.count, "errore")} "
          %ul
            - @producto.errors.full_messages.each do |msg|
              -if msg == 'El codigo de Producto que esta ingresando ya  se encuentra asociado a un GTIN'
                %li="El codigo de Producto que está ingresando ya se encuentra asociado a un GTIN"
              -else
                %li=msg 
      
      %table
        %tr
          %td.texto_tipo_gtin
            =@gtin.nil? ? "Tipo GTIN" : "Tipo GTIN Base"
          %td.combo_tipo_gtin

            -if @producto.new_record?
              =@gtin.nil? ? f.collection_select(:id_tipo_gtin, TipoGtin.find(:all, :conditions => ["tipo in (?)", ["GTIN-8", "GTIN-13"]]), :id, :tipo, :prompt => "-Seleccione-") : f.collection_select(:id_tipo_gtin, TipoGtin.find(:all, :conditions => ["id = ?", params[:base]]), :id, :tipo_gtin_base)

            -else
              =f.hidden_field :id_tipo_gtin, :value => "#{@producto.id_tipo_gtin}"
              =text_field_tag "tipo_gtin", "#{@producto.tipo_gtin.tipo}", :class => "campo_readonly", :readonly => :true
        

        
        - if params[:generar_gtin_14].nil? and params[:action] == 'new'
          %tr
            %td
              Tipo de Creación
            %td
              Manual
              =radio_button_tag 'tipo_creacion', 'manual'
              Automático
              =radio_button_tag 'tipo_creacion', 'automatica'
            %td

        %tr
          %td
            Fecha de Creación
          %td
            =f.date_field :fecha_creacion
          %td
            
        %tr
          %td
            Descripción
          %td

            -if @producto.new_record?
              
              =params[:descripcion] ? f.text_field(:descripcion, :value => @producto_.descripcion, :size => 60)  : f.text_field(:descripcion, :autocomplete => "off", :size => 60)
            -else
              
              =params[:descripcion] ? f.text_field(:descripcion, :value => @producto_.descripcion, :size => 60) : f.text_field(:descripcion, :autocomplete => "off", :size => 60)
            
        %tr
          %td
            Marca
          %td
            -if @producto.new_record?
              =params[:marca] ? f.text_field(:marca, :value => params[:marca], :size => 60): f.text_field(:marca, :autocomplete => "off",  :size => 60)
            -else
              =params[:marca] ? f.text_field(:marca, :value => params[:marca], :size => 60): f.text_field(:marca, :autocomplete => "off", :size => 60)
        %tr
          %td
            URL
          %td
            -if @producto.new_record?
              =params[:img_url] ? f.text_field(:img_url, :value => params[:img_url], :size =>60): f.text_field(:img_url, :autocomplete => "off", :size => 60)
            -else
              =params[:img_url] ? f.text_field(:img_url, :value => params[:img_url], :size => 60): f.text_field(:img_url, :autocomplete => "off", :size => 60)
        %tr
          %td
            Cantidad de Contenido
          %td
            -if @producto.new_record?
              = text_field(:quantity, :units, size: 60)
            -else
              = text_field(:quantity, :units, value: @producto.quantity.units, size: 60)
          %td
            -if @producto.new_record?
              = collection_select(:quantity, :medida_id, Medida.all.order(:nombre), :id, :nombre, :prompt => "-Seleccione-")
            -else
              = collection_select(:quantity, :medida_id, Medida.all.order(:nombre), :id, :nombre, prompt: true, selected: @producto.medida.id)
        %tr
          %td
            Clasificación
          %td
            /= f.text_field :classification_id, :size => 60
            = f.collection_select(:classification_id, Classification.all.order(:name), :id, :code_name, :prompt => "-Seleccione-", :size => 60)
        %tr
          %td
            Paises
          %td
            =select_tag "countries[]",options_from_collection_for_select(@countries,:id, :name ,{:selected => @producto.country_ids}), multiple: true
        %tr
          %td.codigo_producto
            -if !@producto.new_record? or (@producto.errors.messages[:gtin])
              Código Producto
          %td.valor_codigo_producto
            -if !@producto.new_record?
              =(f.text_field :codigo_prod, :readonly => :true, :class => "campo_readonly")
            -elsif @producto.errors.messages[:gtin]
              =f.text_field :codigo_prod
        
      
      =hidden_field_tag "gtin", "#{@gtin}"
      =hidden_field_tag "exceso_productos", "#{@excede_gtin13}"
     
      %button#submit.ui-state-default.ui-corner-all.guardar_producto{:type => "submit", :title => "Guardar producto"}
        %span.ui-icon.ui-icon-disk
        Guardar Producto

      =render '/empresas/regresar'
:javascript
    $( function() {
    $.widget( "custom.combobox", {
      _create: function() {
        this.wrapper = $( "<span>" )
          .addClass( "custom-combobox" )
          .insertAfter( this.element );
 
        this.element.hide();
        this._createAutocomplete();
        this._createShowAllButton();
      },
 
      _createAutocomplete: function() {
        var selected = this.element.children( ":selected" ),
          value = selected.val() ? selected.text() : "";
 
        this.input = $( "<input>" )
          .appendTo( this.wrapper )
          .val( value )
          .attr( "title", "" )
          .addClass( "custom-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left" )
          .autocomplete({
            delay: 0,
            minLength: 0,
            source: $.proxy( this, "_source" )
          })
          .tooltip({
            classes: {
              "ui-tooltip": "ui-state-highlight"
            }
          });
 
        this._on( this.input, {
          autocompleteselect: function( event, ui ) {
            ui.item.option.selected = true;
            this._trigger( "select", event, {
              item: ui.item.option
            });
          },
 
          autocompletechange: "_removeIfInvalid"
        });
      },
 
      _createShowAllButton: function() {
        var input = this.input,
          wasOpen = false;
 
        $( "<a>" )
          .attr( "tabIndex", -1 )
          .attr( "title", "Mostrar todas las clasificaciones" )
          .tooltip()
          .appendTo( this.wrapper )
          .button({
            icons: {
              primary: "ui-icon-triangle-1-s"
            },
            text: false
          })
          .removeClass( "ui-corner-all" )
          .addClass( "custom-combobox-toggle ui-corner-right" )
          .on( "mousedown", function() {
            wasOpen = input.autocomplete( "widget" ).is( ":visible" );
          })
          .on( "click", function() {
            input.trigger( "focus" );
 
            // Close if already visible
            if ( wasOpen ) {
              return;
            }
 
            // Pass empty string as value to search for, displaying all results
            input.autocomplete( "search", "" );
          });
      },
 
      _source: function( request, response ) {
        var matcher = new RegExp( $.ui.autocomplete.escapeRegex(request.term), "i" );
        response( this.element.children( "option" ).map(function() {
          var text = $( this ).text();
          if ( this.value && ( !request.term || matcher.test(text) ) )
            return {
              label: text,
              value: text,
              option: this
            };
        }) );
      },
 
      _removeIfInvalid: function( event, ui ) {
 
        // Selected an item, nothing to do
        if ( ui.item ) {
          return;
        }
 
        // Search for a match (case-insensitive)
        var value = this.input.val(),
          valueLowerCase = value.toLowerCase(),
          valid = false;
        this.element.children( "option" ).each(function() {
          if ( $( this ).text().toLowerCase() === valueLowerCase ) {
            this.selected = valid = true;
            return false;
          }
        });
 
        // Found a match, nothing to do
        if ( valid ) {
          return;
        }
 
        // Remove invalid value
        this.input
          .val( "" )
          .attr( "title", value + " No se encontro ninguna clasificación" )
          .tooltip( "open" );
        this.element.val( "" );
        this._delay(function() {
          this.input.tooltip( "close" ).attr( "title", "" );
        }, 2500 );
        this.input.autocomplete( "instance" ).term = "";
      },
 
      _destroy: function() {
        this.wrapper.remove();
        this.element.show();
      }
    });
 
    $( "#producto_classification_id" ).combobox();
    $( "#toggle" ).on( "click", function() {
      $( "#producto_classification_id" ).toggle();
    });
  } );
  $('#countries_').multiSelect();
        
        
      
